//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TraceBackend.Properties {
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "15.0.1.0")]
    public sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Garamond, 12pt")]
        public global::System.Drawing.Font TextFont {
            get {
                return ((global::System.Drawing.Font)(this["TextFont"]));
            }
            set {
                this["TextFont"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Linux Libertine G, 12pt, style=Italic")]
        public global::System.Drawing.Font FormulaCursive {
            get {
                return ((global::System.Drawing.Font)(this["FormulaCursive"]));
            }
            set {
                this["FormulaCursive"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Lucida Bright, 12pt")]
        public global::System.Drawing.Font FormulaUpright {
            get {
                return ((global::System.Drawing.Font)(this["FormulaUpright"]));
            }
            set {
                this["FormulaUpright"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Lucida Calligraphy, 12pt")]
        public global::System.Drawing.Font Caligraphic {
            get {
                return ((global::System.Drawing.Font)(this["Caligraphic"]));
            }
            set {
                this["Caligraphic"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Garamond, 12pt, style=Italic")]
        public global::System.Drawing.Font TextCursive {
            get {
                return ((global::System.Drawing.Font)(this["TextCursive"]));
            }
            set {
                this["TextCursive"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Times New Roman, 14.25pt")]
        public global::System.Drawing.Font Headline {
            get {
                return ((global::System.Drawing.Font)(this["Headline"]));
            }
            set {
                this["Headline"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Times New Roman, 12pt, style=Italic")]
        public global::System.Drawing.Font Subheadline {
            get {
                return ((global::System.Drawing.Font)(this["Subheadline"]));
            }
            set {
                this["Subheadline"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("(")]
        public string LeftBracketSymbol {
            get {
                return ((string)(this["LeftBracketSymbol"]));
            }
            set {
                this["LeftBracketSymbol"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute(")")]
        public string RightBracketSymbol {
            get {
                return ((string)(this["RightBracketSymbol"]));
            }
            set {
                this["RightBracketSymbol"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("0.7")]
        public float SmallFactor {
            get {
                return ((float)(this["SmallFactor"]));
            }
            set {
                this["SmallFactor"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("F:\\TraceAI")]
        public string AIDirectory {
            get {
                return ((string)(this["AIDirectory"]));
            }
            set {
                this["AIDirectory"] = value;
            }
        }
    }
}
